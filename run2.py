#!/usr/bin/env python

"""Calls the main function of bbob_pproc with arguments from the
   command line. Executes the BBOB postprocessing on the given
   filename and folder arguments, using all found .info files.
Synopsis:
    python path_to_folder/bbob_pproc/run.py [OPTIONS] FILE_NAME FOLDER_NAME...
Help:
    python path_to_folder/bbob_pproc/run.py -h

"""

from __future__ import absolute_import

import os
import sys
import warnings
import getopt
from pdb import set_trace

# Add the path to bbob_pproc
if __name__ == "__main__":
    # append path without trailing '/bbob_pproc', using os.sep fails in mingw32
    #sys.path.append(filepath.replace('\\', '/').rsplit('/', 1)[0])
    (filepath, filename) = os.path.split(sys.argv[0])
    #Test system independent method:
    sys.path.append(os.path.join(filepath, os.path.pardir))

from bbob_pproc.readindexfiles import IndexEntries
from bbob_pproc import pproc, pptex, ppfig2, pprldistr2

# GLOBAL VARIABLES used in the routines defining desired output  for BBOB 2009.
instancesOfInterest = {1:3, 2:3, 3:3, 4:3, 5:3}

#figValsOfInterest = (10, 1e-1, 1e-4, 1e-8)
figValsOfInterest = (10, 1, 1e-1, 1e-2, 1e-3, 1e-5, 1e-8)
figDimsOfInterest = (2, 3, 5, 10, 20, 40)

rldDimsOfInterest = (2, 3, 5, 10, 20, 40)
#rldValsOfInterest = (1e-4, 1e-8)
rldValsOfInterest = (10, 1e-1, 1e-4, 1e-8)
#Put backward to have the legend in the same order as the lines.

#CLASS DEFINITIONS

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


#FUNCTION DEFINITIONS

def usage():
    print main.__doc__


def main(argv=None):
    """Generates from BBOB experiment data some outputs for a tex document.

    If provided with some index entries (from info files), this should return
    many output files in the folder 'ppdata' needed for the compilation of
    latex document templateBBOBarticle.tex. These output files will contain
    performance tables, performance scaling figures and empirical cumulative
    distribution figures. Among these output data, there will be some
    pickle files (.pickle) extension each corresponding to a given index
    entry.

    Keyword arguments:
    argv -- list of strings containing options and arguments. If not given,
    sys.argv is accessed.

    argv should list either names of info files or folders containing info
    files. argv can also contain post-processed pickle files generated by this
    routine. Furthermore, argv can begin with, in any order, facultative option
    flags listed below.

        -h, --help

            display this message

        -v, --verbose

            verbose mode, prints out operations. When not in verbose mode, no
            output is to be expected, except for errors.

        -p, --pickle

            generates pickle post processed data files.

        -o, --output-dir OUTPUTDIR

            change the default output directory ('ppdata') to OUTPUTDIR

        -f, --final

            lengthens the bootstrapping process used as dispersion measure in
            the tables generation. This might double the time of the whole
            post-processing. Please use this option when generating your final
            paper.

        --tab-only, --fig-only, --rld-only

            these options can be used to output respectively the tex tables,
            convergence and ENFEs graphs figures, run length distribution
            figures only. A combination of any two of these options results in
            no output.

    Exceptions raised:
    Usage -- Gives back a usage message.

    Examples:

    * Calling the run.py interface from the command line:

        $ python bbob_pproc/run.py -v experiment1

    will post-process the folder experiment1 and all its containing data,
    base on the found .info files in the folder. The result will appear
    in folder ppdata. The -v option adds verbosity.

        $ python bbob_pproc/run.py -o otherppdata experiment2/*.info

    This will execute the post-processing on the info files found in
    experiment2. The result will be located in the alternative location
    otherppdata.

    * Loading this package and calling the main from the command line
      (requires that the path to this package is in python search path):

        $ python -m bbob_pproc -h

    This will print out this help message.

    * From the python interactive shell (requires that the path to this
      package is in python search path):

        >>> import bbob_pproc
        >>> bbob_pproc.main('-o outputfolder folder1'.split())

    This will execute the post-processing on the index files found in folder1.
    The -o option changes the output folder from the default ppdata to
    outputfolder.

    """

    if argv is None:
        argv = sys.argv[1:]
        # The zero-th input argument which is the name of the calling script is
        # disregarded.

    try:

        try:
            opts, args = getopt.getopt(argv, "hvpfo:",
                                       ["help", "output-dir",
                                        "tab-only", "fig-only", "rld-only",
                                        "pickle", "verbose", "final"])
        except getopt.error, msg:
             raise Usage(msg)

        if not (args):
            usage()
            sys.exit()

        isfigure = True
        istab = False
        isrldistr = True
        isPostProcessed = False
        isPickled = False
        isDraft = True
        verbose = True
        outputdir = 'cmpdata'

        #Process options
        for o, a in opts:
            if o in ("-v","--verbose"):
                verbose = True
            elif o in ("-h", "--help"):
                usage()
                sys.exit()
            elif o in ("-p", "--pickle"):
                isPickled = True
            elif o in ("-o", "--output-dir"):
                outputdir = a
            elif o in ("-f", "--final"):
                isDraft = False
            #The next 3 are for testing purpose
            elif o == "--tab-only":
                isfigure = False
                isrldistr = False
            elif o == "--fig-only":
                istab = False
                isrldistr = False
            elif o == "--rld-only":
                istab = False
                isfigure = False
            else:
                assert False, "unhandled option"

        indexEntries = IndexEntries(args, verbose)

        if not indexEntries:
            sys.exit() #raise Usage("Nothing to do: post-processing stopped.")

        if (verbose):
            for i in indexEntries:
                if (dict((j, i.itrials.count(j)) for j in set(i.itrials)) !=
                    instancesOfInterest):
                    warnings.warn('The data of %s do not list ' %(i) +
                                  'the correct instances ' +
                                  'of function F%d or the ' %(i.funcId) +
                                  'correct number of trials for each.')

        #set_trace()
        dictAlg = indexEntries.dictByAlg()
        if len(dictAlg) < 2:
            Usage('Expect data from two different algorithms, could only find '
                  'one.')
        if len(dictAlg) > 2:
            warnings.warn('Data with multiple algId %s ' % (dictAlg) +
                          'were found, two among those will be processed.')
        keys = sorted(dictAlg.keys()) #alphabetical sort (for now)
        for i, entry in enumerate(keys):
            print "Alg%d is: %s" % (i, entry)

        if isPickled or isfigure or istab or isrldistr:
            if not os.path.exists(outputdir):
                os.mkdir(outputdir)
                if verbose:
                    print 'Folder %s was created.' % (outputdir)

        #if isPickled:
            #indexEntries.pickle(outputdir, verbose)

        if isfigure:
            ppfig2.main(dictAlg[keys[0]], dictAlg[keys[1]],
                        figDimsOfInterest, outputdir, verbose)

        #if istab:
            #print "TeX tables",
            #dictFunc = indexEntries.dictByFunc()
            #for fun, sliceFun in dictFunc.items():
                #dictDim = sliceFun.dictByDim()
                #tmp = []
                #for dim in tabDimsOfInterest:
                    #try:
                        #if len(dictDim[dim]) > 1:
                            #warnings.warn('Func: %d, DIM %d: ' % (fun, dim) +
                                          #'multiple index entries. Will only '+
                                          #'process the first ' +
                                          #'%s.' % dictDim[dim][0])
                        #tmp.append(dictDim[dim][0])
                    #except KeyError:
                        #pass
                #if tmp:
                    #filename = os.path.join(outputdir,'ppdata_f%d' % fun)
                    #pptex.main(tmp, tabValsOfInterest, filename, isDraft,
                               #verbose)
            #if isDraft:
                #print "(draft mode) done. To get final version tables, please use the -f option with run.py"
            #else:
                #print "done."

        if isrldistr:
            dictDim0 = dictAlg[keys[0]].dictByDim()
            dictDim1 = dictAlg[keys[1]].dictByDim()

            print "ECDF absolute target graphs",
            #set_trace()
            for dim in set(dictDim0.keys()) | set(dictDim1.keys()):
                if dim in rldDimsOfInterest:
                    pprldistr2.main(dictDim0[dim], dictDim1[dim],
                                    rldValsOfInterest, False,
                                    outputdir, 'dim%02dall' % dim, verbose)
                    dictFG0 = dictDim0[dim].dictByFuncGroup()
                    dictFG1 = dictDim1[dim].dictByFuncGroup()
                    for fGroup in set(dictFG0.keys()) | set(dictFG1.keys()):
                        pprldistr2.main(dictFG0[fGroup], dictFG1[fGroup],
                                        rldValsOfInterest, False,
                                        outputdir, 'dim%02d%s' % (dim, fGroup),
                                        verbose)
            print "done."

            print "ECDF relative target graphs",
            for dim in set(dictDim0.keys()) | set(dictDim1.keys()):
                if dim in rldDimsOfInterest:
                    pprldistr2.main(dictDim0[dim], dictDim1[dim], None, True,
                                    outputdir, 'dim%02dall' % dim, verbose)
                    dictFG0 = dictDim0[dim].dictByFuncGroup()
                    dictFG1 = dictDim1[dim].dictByFuncGroup()
                    for fGroup in set(dictFG0.keys()) | set(dictFG1.keys()):
                        pprldistr2.main(dictFG0[fGroup], dictFG1[fGroup], None,
                                        True, outputdir,
                                        'dim%02d%s' % (dim, fGroup), verbose)
            print "done."


        #if verbose:
            #tmp = []
            #tmp.extend(tabValsOfInterest)
            #tmp.extend(figValsOfInterest)
            #tmp.extend(rldValsOfInterest)
            #if indexEntries:
                #print ('Overall ps = %g\n'
                       #% indexEntries.successProbability(min(tmp)))

        if isfigure or istab or isrldistr:
            print "Output data written to folder %s." % outputdir

    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use -h or --help"
        return 2


if __name__ == "__main__":
   sys.exit(main())
